import sys
sys.path.extend(['/home/nitram/Documents/work/MUPIF/commit'])
from mupif import *
import Pyro4
import logging
log = logging.getLogger()
import time as timeT
import mupif.Physics.PhysicalQuantities as PQ
import LAMMPS_v3 as lammps
import DigimatConfig
digimat_cfg = DigimatConfig.digimatConfig()


class Workflow1(Workflow.Workflow):
   
    def __init__(self, targetTime=PQ.PhysicalQuantity('0 s')):
        """
        Initializes the workflow. As the workflow is non-stationary, we allocate individual 
        applications and store them within a class.
        """
        super(Workflow1, self).__init__(file='', workdir='', targetTime=targetTime)

        self.myInputPropIDs = [PropertyID.PID_SMILE_MOLECULAR_STRUCTURE,PropertyID.PID_MOLECULAR_WEIGHT, PropertyID.PID_CROSSLINKER_TYPE,PropertyID.PID_FILLER_DESIGNATION, PropertyID.PID_CROSSLINKONG_DENSITY,PropertyID.PID_FILLER_CONCENTRATION, PropertyID.PID_TEMPERATURE, PropertyID.PID_PRESSURE, PropertyID.PID_POLYDISPERSITY_INDEX,PropertyID.PID_SMILE_MODIFIER_MOLECULAR_STRUCTURE,PropertyID.PID_SMILE_FILLER_MOLECULAR_STRUCTURE,PropertyID.PID_DENSITY_OF_FUNCTIONALIZATION,PropertyID.PID_CompositeAxialYoung,PropertyID.PID_CompositeInPlaneYoung, PropertyID.PID_CompositeInPlaneShear,PropertyID.PID_CompositeTransverseShear,PropertyID.PID_CompositeTransverseShear,PropertyID.PID_CompositeInPlanePoisson,PropertyID.PID_CompositeTransversePoisson]
        self.myCompulsoryPropIDs = self.myInputPropIDs

        self.myOutPropIDs =  [PropertyID.PID_CompositeAxialYoung,PropertyID.PID_CompositeInPlaneYoung, PropertyID.PID_CompositeInPlaneShear, PropertyID.PID_CompositeTransverseShear, PropertyID.PID_CompositeInPlanePoisson,PropertyID.PID_CompositeTransversePoisson]
        
        self.myInputProps = {}
        self.myOutProps = {}

        #locate nameserver
        ns = PyroUtil.connectNameServer(digimat_cfg.nshost, digimat_cfg.nsport, digimat_cfg.hkey)
        #connect to JobManager running on (remote) server
        self.digimatJobMan = PyroUtil.connectJobManager(ns, digimat_cfg.jobManName,digimat_cfg.hkey)
        
        self.lammpsSolver = lammps.emailAPI(None)
        self.digimatSolver = None
        #allocate the application instances
        try:
            self.digimatSolver = PyroUtil.allocateApplicationWithJobManager( ns, self.digimatJobMan, digimat_cfg.jobNatPorts[0], digimat_cfg.hkey, PyroUtil.SSHContext(sshClient=digimat_cfg.sshClient, options=digimat_cfg.options, sshHost=digimat_cfg.sshHost ))

            
            log.info('Created digimat job')
        except Exception as e:
            log.exception(e)
        else:
            if ((self.lammpsSolver is not None) and (self.digimatSolver is not None)):
                lammpsSolverSignature=self.lammpsSolver.getApplicationSignature()
                log.info("Working lammps solver on server " + lammpsSolverSignature)
                digimatSolverSignature=self.digimatSolver.getApplicationSignature()
                log.info("Working digimat solver on server " + digimatSolverSignature)
            else:
                log.debug("Connection to server failed, exiting")


    def setProperty(self, property, objectID=0):
        propID = property.getPropertyID()
        if (propID in self.myInputPropIDs):
            self.myInputProps[propID]=property
        else:
            raise APIError.APIError('Unknown property ID')

    def getProperty(self, propID, time, objectID=0):
        if (propID in self.myOutPropIDs):
            return self.myOutProps[propID]
        else:
            raise APIError.APIError ('Unknown property ID', propID)   

    def solveStep(self, istep, stageID=0, runInBackground=False):

        for cID in self.myCompulsoryPropIDs:
            if cID not in self.myInputPropIDs:
                raise APIError.APIError ('Missing property ID', cID)   
            
        try:
            # lammps 
            lammpsSolver.setProperty(self.monomerMolStructure)
            lammpsSolver.setProperty(self.polymerMolWeight)
            lammpsSolver.setProperty(self.crosslinkerType)
            lammpsSolver.setProperty(self.fillerDesignation)
            lammpsSolver.setProperty(self.crosslinkingDens)
            lammpsSolver.setProperty(self.fillerConc)
            lammpsSolver.setProperty(self.temperature)
            lammpsSolver.setProperty(self.pressure)
            lammpsSolver.setProperty(self.polyIndex)
            lammpsSolver.setProperty(self.fillerModMolStructure)
            lammpsSolver.setProperty(self.polFilCompatibilizerMolStructure)
            lammpsSolver.setProperty(self.functionalizationDens)
	    # solve (involves operator interaction)
            lammpsSolver.solveStep (useCaseID, execID, TimeStep.TimeStep(0.0, 0.1, 1, 's'))
            # get result of the simulation
            matrixYoung = lammpsSolver.getProperty(PropertyID.PID_EModulus, 0.0).getValue()
            matrixPoissons = lammpsSolver.getProperty(PropertyID.PID_PoissonRatio, 0.0).getValue()
        except APIError.APIError as err:
            print ("Mupif API for LAMMPS_v3 error: "+ repr(err))
        except Exception as err:
            print ("Error:" + repr(err))
        except:
            print ("Unkown error.")

        # digimat
        try:
            # properties from lammps
            digimatSolver.setProperty(Property.ConstantProperty(matrixYoung, PID_MatrixYoung,               ValueType.Scalar, "MPa"))
            digimatSolver.setProperty(Property.ConstantProperty(matrixPoisson, PID_MatrixPoisson,             ValueType.Scalar, "none"))
            # fixed properties - taken form the database
            digimatSolver.setProperty(Property.ConstantProperty(100, PID_InclusionYoung,            ValueType.Scalar, "MPa"))
            digimatSolver.setProperty(Property.ConstantProperty(0.2, PID_InclusionPoisson,          ValueType.Scalar, "none"))
            digimatSolver.setProperty(Property.ConstantProperty(0.3, PID_InclusionVolumeFraction,   ValueType.Scalar, "none"))
            digimatSolver.setProperty(Property.ConstantProperty(0.5, PID_InclusionAspectRatio,      ValueType.Scalar, "none"))
            # solve digimat part
            log.info("Running digimat")
            digimatSolver.solve()
            ## set the desired properties
            self.myOutProps[PropertyID.PID_CompositeAxialYoung] = digimatSolver.getProperty(PID_CompositeAxialYoung)
            self.myOutProps[PropertyID.PID_CompositeInPlaneYoung] = digimatSolver.getProperty(PID_CompositeInPlaneYoung)
            self.myOutProps[PropertyID.PID_CompositeInPlaneShear] = digimatSolver.getProperty(PID_CompositeInPlaneShear)
            self.myOutProps[PropertyID.PID_CompositeTransverseShear] = digimatSolver.getProperty(PID_CompositeTransverseShear)
            self.myOutProps[PropertyID.PID_CompositeInPlanePoisson] = digimatSolver.getProperty(PID_CompositeInPlanePoisson)
            self.myOutProps[PropertyID.PID_CompositeTransversePoisson] = digimatSolver.getProperty(PID_CompositeTransversePoisson)

        except APIError.APIError as err:
            print ("Mupif API for DIGIMAT error: "+ repr(err))
        except Exception as err:
            print ("Error:" + repr(err))
        except:
            print ("Unkown error.")



    def getCriticalTimeStep(self):
        # determine critical time step
        return PQ.PhysicalQuantity(1.0, 's')

    def terminate(self):
        #self.thermalAppRec.terminateAll()
        self.lammpsSolver.terminate()
        self.digimatSolver.terminate()
        self.digimatJobMan.terminate()
        super(Workflow1, self).terminate()

    def getApplicationSignature(self):
        return "Demo11 workflow 1.0"

    def getAPIVersion(self):
        return "1.0"

    
if __name__=='__main__':
    workflow1 = Workflow1(targetTime=PQ.PhysicalQuantity(1.,'s'))
    # create and set lammps material properties
    workflow1.setProperty(Property.ConstantProperty(1000, PropertyID.PID_SMILE_MOLECULAR_STRUCTURE, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(100, PropertyID.PID_MOLECULAR_WEIGHT, ValueType.Scalar, 'mol', None, 0))
    workflow1.setProperty(Property.ConstantProperty(0.2, PropertyID.PID_CROSSLINKER_TYPE, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(12, PropertyID.PID_FILLER_DESIGNATION, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(12, PropertyID.PID_CROSSLINKONG_DENSITY, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(12, PropertyID.PID_FILLER_CONCENTRATION, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(2000, PropertyID.PID_TEMPERATURE, ValueType.Scalar, 'degC', None, 0))
    workflow1.setProperty(Property.ConstantProperty(500, PropertyID.PID_PRESSURE, ValueType.Scalar, 'atm', None, 0))
    workflow1.setProperty(Property.ConstantProperty(1, PropertyID.PID_POLYDISPERSITY_INDEX, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(1000, PropertyID.PID_SMILE_MODIFIER_MOLECULAR_STRUCTURE, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(123, PropertyID.PID_SMILE_FILLER_MOLECULAR_STRUCTURE, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))
    workflow1.setProperty(Property.ConstantProperty(800, PropertyID.PID_DENSITY_OF_FUNCTIONALIZATION, ValueType.Scalar, PQ.getDimensionlessUnit(), None, 0))   
    
    workflow1.solve()
    time = PQ.PhysicalQuantity(1.0, 's')
    compositeAxialYoung = workflow1.getProperty(PropertyID.PID_CompositeAxialYoung, time).inUnitsOf('MPa').getValue()
    compositeInPlaneYoung = workflow1.getProperty(PropertyID.PID_CompositeInPlaneYoung, time).inUnitsOf('MPa').getValue()
    compositeInPlaneShear = workflow1.getProperty(PropertyID.PID_CompositeInPlaneShear, time).inUnitsOf('MPa').getValue()
    compositeTransverseShear = workflow1.getProperty(PropertyID.PID_CompositeTransverseShear, time).inUnitsOf('MPa').getValue()
    compositeInPlanePoisson = workflow1.getProperty(PropertyID.PID_CompositeInPlanePoisson,time).getValue()
    compositeTransversePoisson = workflow1.getProperty(PropertyID.PID_CompositeTransversePoisson, time).getValue()
                
    log.info("Test OK")


